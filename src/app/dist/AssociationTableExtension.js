(function(React2, react) {
  "use strict";
  const hubspot = {
    extend: render
  };
  const extend = (...args) => self.extend(...args);
  function render(renderCallback) {
    return extend((root, api) => {
      const renderCallbackResult = renderCallback(api);
      if (!React2.isValidElement(renderCallbackResult)) {
        throw new Error(`[hubspot.extend]: Expected callback function to return a valid element, got: ${renderCallbackResult}`);
      }
      react.createRoot(root).render(renderCallbackResult);
      root.mount();
    });
  }
  react.createRemoteReactComponent("Alert");
  react.createRemoteReactComponent("Button");
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image");
  react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Link");
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag");
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  react.createRemoteReactComponent("Flex");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  function createExtensionComponent(componentType) {
    return react.createRemoteReactComponent(componentType);
  }
  createExtensionComponent("CrmObjectProperty");
  createExtensionComponent("CrmPropertyList");
  const CrmAssociationTable = createExtensionComponent("CrmAssociationTable");
  createExtensionComponent("CrmDataHighlight");
  createExtensionComponent("CrmReport");
  createExtensionComponent("CrmAssociationPivot");
  createExtensionComponent("CrmAssociationPropertyList");
  createExtensionComponent("CrmStageTracker");
  hubspot.extend(({ context }) => /* @__PURE__ */ React2.createElement(Extension, { context }));
  const Extension = ({ context }) => {
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Open Deals worth more than $100 sorted by deal value"), /* @__PURE__ */ React2.createElement(
      CrmAssociationTable,
      {
        objectTypeId: "0-3",
        propertyColumns: [
          "dealname",
          "hubspot_owner_id",
          "amount",
          "dealstage"
        ],
        quickFilterProperties: ["hubspot_owner_id", "dealstage", "amount"],
        pageSize: 10,
        preFilters: [
          {
            operator: "NOT_IN",
            property: "dealstage",
            values: ["closedwon", "closedlost"]
          },
          {
            operator: "GT",
            property: "amount",
            value: 100
          }
        ],
        sort: [
          {
            direction: 1,
            columnName: "amount"
          }
        ],
        searchable: true,
        pagination: true
      }
    ));
  };
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
